const OAS = require("../models/models.oas");


const learnOas = async ({ seraHost, urlData, response, req }) => {
  let existingOas = seraHost.oas_spec;
  let path = urlData.path;


  if (!existingOas.paths) {
    existingOas.paths = {};
  }

  // Ensure the path exists in the OAS document
  if (!existingOas.paths[path]) {
    existingOas.paths[path] = {};
  }

  function getType(value) {
    if (Array.isArray(value)) return "array";
    if (value === null) return "null"; // Note: OAS does not directly support 'null'. This needs special handling.
    return typeof value;
  }

  // Helper function to generate schema from data
  function generateSchemaFromData(data) {
    if (Array.isArray(data)) {
      let itemsType = data.length > 0 ? generateSchemaFromData(data[0]) : {};
      return { type: "array", items: itemsType };
    } else if (typeof data === "object" && data !== null) {
      let properties = {};
      Object.keys(data).forEach((key) => {
        if (data[key] !== undefined) {
          // Check to ensure the property is not undefined
          properties[key] = generateSchemaFromData(data[key]);
        }
      });
      return { type: "object", properties: properties };
    } else {
      return { type: typeof data };
    }
  }

  // Assuming the method is not already defined for the path
  if (!existingOas.paths[path][req.method.toLowerCase()]) {
    let parameters = [];

    // Add query parameters, if present
    if (req.query && Object.keys(req.query).length) {
      Object.keys(req.query).forEach((key) => {
        parameters.push({
          name: key,
          in: "query",
          required: false, // Adjust based on actual requirement
          schema: {
            type: getType(req.query[key]),
          },
        });
      });
    }

    // Add path parameters, if present
    if (req.params && Object.keys(req.params).length) {
      Object.keys(req.params).forEach((key) => {
        parameters.push({
          name: key,
          in: "path",
          required: false, // Adjust based on actual requirement
          schema: {
            type: getType(req.params[key]),
          },
        });
      });
    }

    // Check for response and req.body before attempting to use them
    let responseSchema =
      response && response.data ? generateSchemaFromData(response.data) : null;
    let requestBodySchema =
      req.body && Object.keys(req.body).length !== 0
        ? generateSchemaFromData(req.body)
        : null;

    // Now add the dynamically generated parameters array, request body schema, and response schema to the OAS path schema
    existingOas.paths[path][req.method.toLowerCase()] = {
      summary: `Auto-generated path for ${path}`,
      description: `Automatically generated operation for method ${req.method}`,
      operationId: `autoGeneratedOperation${Date.now()}`,
      parameters: parameters,
      responses: responseSchema
        ? {
            [response.status]: {
              description: `Example response for ${path}`,
              content: {
                "application/json": {
                  schema: responseSchema,
                },
              },
            },
          }
        : {},
    };

    // Conditionally add requestBody to the OAS path schema if it's present and not empty
    if (requestBodySchema) {
      existingOas.paths[path][req.method.toLowerCase()].requestBody = {
        content: {
          "application/json": {
            schema: requestBodySchema,
          },
        },
      };
    }
  }

  try {
    if (!seraHost.oas_id || !existingOas) {
      throw new Error("Missing OAS document ID or update data.");
    }

    const updatedDocument = await OAS.findByIdAndUpdate(
      seraHost.oas_id,
      { $set: existingOas }, // Use $set to explicitly specify the fields to update
      { new: true, runValidators: true } // Return the updated document and run schema validators
    );

    if (updatedDocument) {
      console.log("OAS document updated successfully:", updatedDocument);
    } else {
      console.log("OAS document not found with ID:", seraHost.oas_id);
    }
  } catch (error) {
    console.error("Error updating OAS document:", error);
  }
};

module.exports = {
  learnOas,
};
